#!/usr/bin/env python

import sys, os, stat
import urllib
import tarfile
import tempfile
import fileinput
import platform
from random import choice

from optparse import OptionParser

try:
    import django
except ImportError:
    django = False


#############################################################################
# Option Parsing
#############################################################################

# Not currently used...
parser = OptionParser()

(options, args) = parser.parse_args()


#############################################################################
# Reworking
#############################################################################
BASE_SETTINGS_PY = """# Django settings for {{ name }} project.

DEBUG = True
TEMPLATE_DEBUG = DEBUG

ADMINS = (
    # ('Your Name', 'your_email@domain.com'),
)

MANAGERS = ADMINS

DATABASE_ENGINE = ''           # 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
DATABASE_NAME = ''             # Or path to database file if using sqlite3.
DATABASE_USER = ''             # Not used with sqlite3.
DATABASE_PASSWORD = ''         # Not used with sqlite3.
DATABASE_HOST = ''             # Set to empty string for localhost. Not used with sqlite3.
DATABASE_PORT = ''             # Set to empty string for default. Not used with sqlite3.

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'America/Chicago'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# Absolute path to the directory that holds media.
# Example: "/home/media/media.lawrence.com/"
MEDIA_ROOT = ''

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash if there is a path component (optional in other cases).
# Examples: "http://media.lawrence.com", "http://example.com/media/"
MEDIA_URL = ''

# URL prefix for admin media -- CSS, JavaScript and images. Make sure to use a
# trailing slash.
# Examples: "http://foo.com/media/", "/media/".
ADMIN_MEDIA_PREFIX = '/media/'

# Make this unique, and don't share it with anybody.
SECRET_KEY = '{{ secret_key }}'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.load_template_source',
    'django.template.loaders.app_directories.load_template_source',
#     'django.template.loaders.eggs.load_template_source',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
)

ROOT_URLCONF = 'urls'

TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.admin',
)
"""

URLS_PY = """from django.conf.urls.defaults import *
from django.conf import settings

from django.contrib import admin
admin.autodiscover()

urlpatterns = patterns('',
    # Example:
    # (r'^example/', include('example.foo.urls')),

    # Serve up static files for development
    (r'^static/(?P<path>.*)$', 'django.views.static.serve', {'document_root': settings.MEDIA_ROOT}),

    # Uncomment the admin/doc line below and add 'django.contrib.admindocs' 
    # to INSTALLED_APPS to enable admin documentation:
    #(r'^admin/doc/', include('django.contrib.admindocs.urls')),

    # Uncomment the next line to enable the admin:
    (r'^admin/', include(admin.site.urls)),
)
"""

DEVELOPMENT_PY = """
from base import *

DATABASE_ENGINE = 'sqlite3'
DATABASE_NAME = 'devel.db'

MEDIA_URL = '/static/'

MEDIA_ROOT = '{{ path }}/media/'

TEMPLATE_DIRS = (
    '{{ path }}/templates/',
)

"""

class GigProject(object):

    def __init__(self, options, args):
        self.options = options
        self.args = args
        self.name = os.path.basename(args[0])
        self.path = os.path.abspath( os.path.expanduser( args[0] ) )
        self.tree_exists = False;
        
    def log(self, s):
        print s
        
    def mkdir(self, path):
        self.log("Creating %s" % path)
        try:
            os.mkdir(path)
        except OSError:
            self.log("...already exists")
    
    def makeTree(self):
        self.mkdir(self.name)
        for p in ('apps', 'config', 'config/settings', 'templates', 'media', 'media/js', 'media/img', 'media/css', 'script', 'vendor'):
            self.mkdir('%s/%s' % (self.path, p))
        
        self.tree_exists = True;
    
    def createProject(self):
        from django.core import management
        
        if not self.tree_exists:
            self.makeTree()
        
        management.base.copy_helper(None, 'project', self.name, self.path)
        
        #project = Project('%s/%s' % (self.path, self.name), self.path)
        #project.moveFiles()

    def writeFile(self, path, content):
        """Write content to file represented by path, relative to project root"""
        f = open('%s/%s' % (self.path, path), 'w+')
        f.write(content)
        f.close()
        
#############################################################################
# The Procedural Bits
#############################################################################

gig = GigProject(options, args)
gig.makeTree()
#gig.createProject()

MANAGE_SCRIPT = """#!/usr/bin/env python 
import sys, os

basedir = '%(basedir)s'

sys.path[1:1] = ['%%s/config' %% basedir, '%%s/apps' %% basedir, '%%s/vendor' %% basedir]

from django.core.management import execute_manager

try:
    from settings import settings
except ImportError:
    import sys
    sys.stderr.write("Error: Can't import settings")
    sys.exit(1)

if __name__ == "__main__":
    execute_manager(settings)

""" % {'basedir': gig.path}

SETTINGS_INIT = """
import platform

hostname = platform.node().split('.')[0].replace('-', '_')

try:
    settings = __import__(hostname, globals(), locals(), [], -1)
except:
    print "Unable to import host-specific settings module '%s', falling back to 'base'" % hostname
    import base as settings

"""

DJANGO_WSGI = """
import os, sys

basedir = '%(basedir)s'
sys.path[1:1] = ['%%s/config' %% basedir, '%%s/apps' %% basedir, '%%s/vendor' %% basedir]

os.environ['PYTHON_EGG_CACHE'] = '/var/cache/egg-cache'
os.environ['DJANGO_SETTINGS_MODULE'] = 'settings.production'

import django.core.handlers.wsgi

application = django.core.handlers.wsgi.WSGIHandler()

""" % {'basedir': gig.path}

APACHE_CONF = """
Alias /media/ %(basedir)s/media/

<Directory %(basedir)s/media>
    Order deny,allow
    Allow from all
</Directory>

WSGIScriptAlias / %(basedir)s/config/django.wsgi

<Directory %(basedir)s/config>
    Order deny,allow
    Allow from all
</Directory>

""" % {'basedir': gig.path}

hostname = platform.node().split('.')[0].replace('-', '_')
secret_key = ''.join([choice('abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)') for i     in range(50)])

base_settings = BASE_SETTINGS_PY.replace('{{ secret_key }}', secret_key).replace('{{ name }}', gig.name)

gig.writeFile('config/settings/base.py', BASE_SETTINGS_PY)
gig.writeFile('config/settings/%s.py' % hostname, DEVELOPMENT_PY)
gig.writeFile('config/settings/__init__.py', SETTINGS_INIT)
gig.writeFile('config/urls.py', URLS_PY)
gig.writeFile('config/django.wsgi', DJANGO_WSGI)
gig.writeFile('config/apache.conf', APACHE_CONF)
gig.writeFile('script/manage.py', MANAGE_SCRIPT)

statinfo = os.stat('%s/script/manage.py' % gig.path)
permissions = stat.S_IEXEC | statinfo[0]
os.chmod('%s/script/manage.py' % gig.path, permissions)
